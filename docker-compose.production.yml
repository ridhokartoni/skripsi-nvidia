version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  admin-api:
    image: skripsi-admin-api
    container_name: skripsi-admin-api
    build:
      context: ./skripsi-admin
      dockerfile: Dockerfile
    environment:
      # Database
      DATABASE_URL: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?schema=public"
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      # JWT
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      # Server
      NODE_ENV: ${NODE_ENV:-production}
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-production}
      PORT: 3000
      API_HOST: ${API_HOST}
      # Docker
      DOCKER_DNS_SERVERS: ${DOCKER_DNS_SERVERS}
      DOCKER_NETWORK_NAME: ${DOCKER_NETWORK_NAME:-app-network}
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      # GPU
      NVIDIA_VISIBLE_DEVICES: ${NVIDIA_VISIBLE_DEVICES:-all}
      NVIDIA_DRIVER_CAPABILITIES: ${NVIDIA_DRIVER_CAPABILITIES:-utility,compute}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    image: skripsi-frontend
    container_name: skripsi-frontend
    build:
      context: ./skripsi-frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "${FRONTEND_PORT:-3001}:3001"
    networks:
      - app-network
    depends_on:
      - admin-api
    restart: unless-stopped

  # Optional: Nginx reverse proxy for production
  # Uncomment if you want to use nginx as reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - app-network
  #   depends_on:
  #     - frontend
  #     - admin-api
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME:-nvidia-network}
